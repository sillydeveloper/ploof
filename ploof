#!/usr/local/bin/php
<?
namespace core;

include_once 'config/config.php';

//--------------------------------------------------
//          INITIALIZE
//--------------------------------------------------
function initialize()
{
    DB::query("create table if not exists Versioning(id int not null primary key auto_increment, migration int, branch varchar(255))");
    
    DB::query("insert into Versioning values(null, 0, 'trunk')");
}

//--------------------------------------------------
//          GENERATE MODELS
//--------------------------------------------------
function generate_models()
{
    $qry= DB::query("show tables");
    $classes= array();
    
    while($table= \mysql_fetch_array($qry))
    {   
        $table= $table[0];
                
        // check for habtm:
        $split= explode(PLOOF_SEPARATOR, $table);
        $habtm = true;
        
        if (count($split) < 2)
            $habtm= false; // no habtm
        else
        {   
            // we may have a habtm; check to make sure that the joined tables match:
            //foreach($split as $s=>$search_for_tablename)
            //{
            //    if (array_search($split[0], $search_for_tablename) === false)
            //        $habtm = false;
            //}
            
            //if ($habtm)
            //{
                // link them all together:
                foreach($split as $s=>$search_for_tablename)
                {
                    foreach($split as $s2=>$search_for_tablename2)
                    {
                        if ($search_for_tablename != $search_for_tablename2)
                            $classes[$search_for_tablename]['habtm'][]= $search_for_tablename2;
                    }
                }
            //}
        }
            
        if ($habtm == false)
        {
            $qry2= DB::query("show columns from ".$table);
            
            while($column= mysql_fetch_array($qry2))
            {
                $column= $column["Field"];
                
                if ($column == PRIMARY_KEY)
                    $classes[$table]= array();
                
                if (preg_match('/'.PK_SEPERATOR.PRIMARY_KEY.'$/', $column))
                {
                    $foreign_table= str_replace( PK_SEPERATOR.PRIMARY_KEY,"",$column);
                    $classes[$table]['belongs_to'][]= $foreign_table;
                    $classes[$foreign_table]['has_many'][]= $table;
                }
            } // end foreach show columns
        } // end if !habtm
        
    } // end foreach table
    
    print_r($classes);
    
    foreach($classes as $class=>$relations)
    {
        $file = "model/".$class.".php";
        if (file_exists($file) == false)
        {
            $f= fopen($file, "w+");
            fwrite($f,"<?\n");
            fwrite($f,"class $class extends core\\Model\n");
            fwrite($f,"{\n");
            foreach ($relations as $k=>$r)
                fwrite($f,"    protected \$$k= array('".implode("', '", $r)."');\n");
            fwrite($f,"    static function classname()\n");
            fwrite($f,"    {\n");
            fwrite($f,"        return __CLASS__;\n");
            fwrite($f,"    }\n");
            fwrite($f,"}\n");
            fwrite($f,"?>");
            fclose($f);
        }
    }
    
} // end generate models

//--------------------------------------------------
//          HSS
//--------------------------------------------------
function hss()
{
    exec("./resource/bin/hss public/css/ploof.hss");
}

//--------------------------------------------------
//          UPDATE
//--------------------------------------------------
function setup_patch_directory($version= "trunk")
{
    if (opendir("resource/updates"))
        exec("rm -rf resource/updates");
    
    // export a copy of the code off the server:
    exec("mkdir resource/updates");
    if ($version != "trunk")
        $version= "branches/".$version;
    
    exec("svn export http://ploof.googlecode.com/svn/$version ./resource/updates/svn");
}

$patch_list= array(
        "./core"=>"./resource/updates/svn/core",
        "./config/config.default.php"=>"./resource/updates/svn/config/config.default.php",
        "./ploof"=>"./resource/updates/svn/ploof",
        "./public/index.php"=>"./resource/updates/svn/public/index.php",
        "./resource/schemas/init.sql"=>"./resource/updates/svn/resource/schemas/init.sql",
        "./README"=>"./resource/updates/svn/README",
        "./resource/bin",
        "./config/fun.php"=>"./resource/updates/svn/config/fun.php",
        "./resources/schemas"=>"./resources/updates/svn/resources/schemas"
    );
            
function generate_patch($version= "trunk")
{   
    global $patch_list; 
    setup_patch_directory($version);
    
    // build patch files:
    foreach($patch_list as $k=>$v)
    {
        $patch_filename= preg_replace("/[\.\/]*/", "_",$k);
        exec("diff -rupN -x .svn $k $v > ./resource/updates/$patch_filename.patch");
    }
}

function patch()
{
    global $patch_list;
    foreach($patch_list as $k=>$v)
    {
        $patch_filename= preg_replace("/[\.\/]*/", "_",$k);
        exec("patch -p1 < ./resource/updates/$patch_filename.patch");
    }
}

function update($version= "trunk")
{
    generate_patch($version);
    patch();
}
//--------------------------------------------------
//          MIGRATIONS
//--------------------------------------------------
function get_migration_path($branch)
{
    return "./resource/migrations/$branch";
}

function get_last_file_number_for($path)
{
    // input should be in the format:
    //  [number]__[text]
    foreach(scandir($path,1) as $k=>$v)
    {
        if ($v != "." and $v != "..")
            return $v; // scan dir (reverse order) then pop and split 
    }
}

function migration($branch= "trunk")
{
    $path= get_migration_path($branch);
    $dir= opendir($path);
    if (!$dir) 
    {
        mkdir($path);
        DB::query("insert into Versioning values(null, 0, '$branch');");
        touch($path."/1__Migration");
    }
    else
    {
        $last_number= get_last_file_number_for($path);
        touch($path."/".($last_number+1).PLOOF_SEPARATOR."Migration");
    }
}

function migrate($branch= "trunk")
{    
    $v= Versioning::find("branch= '".$branch."'");
    $last_db_number= $v->migration;
    $last_file_number= get_last_file_number_for(get_migration_path($branch));
    if ($last_db_number < $last_file_number)
    {
        // load them up and apply them!
        $path= get_migration_path($branch);
        $scan= scandir($path);
        foreach($scan as $k=>$v)
        {
            $split= explode("__", $v);
            $fnum= $split[0];
            print_r($fnum);
            print_r($last_db_number);
            if ($fnum > $last_db_number and $v != "." and $v != "..")
            {
                exec("cat ".$path."/".$v." | mysql -u ".DATABASE_USER." ".DATABASE_NAME);
            }
        } // end foreach
    } // end db_number vs file_number
}

//--------------------------------------------------
//          CLEAN
//--------------------------------------------------
function clean()
{
    exec("rm -rf resource/updates");
}

//--------------------------------------------------
//          PATCH PLOOF
//--------------------------------------------------
function patch_ploof($version= "trunk")
{
    global $patch_list;
    
    setup_patch_directory($version);

    exec("rm ./resource/updates/patch_ploof.patch");

    foreach($patch_list as $k=>$v)
    {
        exec("diff -rupN -x .svn $v $k >> ./resource/updates/patch_ploof.patch");
    }
    
    print "Please send ./resource/updates/patch_ploof.patch to frugalprogrammer@gmail.com!\n";
}

//--------------------------------------------------
//          TEST
//--------------------------------------------------
function test($lib='application')
{
    define('IN_UNIT_TESTING', 1);
    
    passthru('phpunit test/'.$lib);
}

//--------------------------------------------------
//          MAIN LOOP
//--------------------------------------------------
if ($argc < 2)
{
    print "usage: ploof [command]\n\n";
    print "Commands: \n";
    print "test.................... run unit tests (application is default)\n";
    print "hss..................... recreate css from hss file\n";
    print "migrate................. migrate your database to the current migration\n";
    print "migration............... create a new migration in resource/migrations\n";
    print "generate_models......... generate classfiles from your database\n";
    print "initialize.............. initialize your database\n";
    print "update.................. update via diff; you can optionally supply a version to update to (trunk is default)\n";
    print "clean................... clean various detritus that can build up\n";
    print "migration............... create a migration; optionally add the branch for this migration\n";
    print "migrate................. bring this version of the database up to date; optionally add a branch to migrate from\n";
    print "patch_ploof............. for developers: create a patchfile to submit to patch ploof\n";
    exit;
}

print "Running ".$argv[1]."... \n";

($argc < 3) ? eval("core\\".$argv[1]."();") : eval("core\\".$argv[1]."('".$argv[2]."');");

?>