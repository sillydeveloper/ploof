PHP LIGHTWEIGHT OBJECT ORIENTED FRAMEWORK README
    author(s): Andrew Ettinger, Nick Sinopoli
    
=== GETTING STARTED ===

We don't have a release yet, so it's time for a fork! 

    git branch git://github.com/sillydeveloper/ploof.git


=== THE PLOOF COMMAND ===

The ./ploof utility is the swiss army knife of the framework. Not sure what to run with it? Just run ./ploof without any options to get a list of currently supported commands.


    
=== MODEL FEATURES ===
    
    AUTO HANDLING
        Basically, if a table has [tablename]_id in it, ploof knows it's a relationship 
        and you can access it like:
            class foo()
            {
                protected $has_many= array('bar');
            }
        
            $f= new foo();
            foreach($f->bar->find() as $a_bar) { print($a_bar->id."\n"); }
    
    OVERRIDING
        You can override the auto loader by having a function named get_[foo]()
        Example:
        
            class foo()
            {
                protected $has_many= array('bar');
                function get_bar()
                {
                    return bar::find('start_date < now()');
                }
            }
    
        Whatever is returned is used by the caching / lazy loader mechanism.


=== CONTROLLER FEATURES ===
    
    REDIR
        Pass in a GET or POST variable called 'redir' with a url to have the controller auto-route 
        you once the render is complete
    
    ROUTE
        Routable actions were intended to be used by things like add / delete / save
    
    ASSIGN
        Assigns are made available to your view via $controller->assign("varname", $varvalue);
        
    MAIN_CONTROLLER AND MAIN_ACTION
        If you need to know who the *topmost* call is coming from when the page loads,
        $_REQUEST['main_controller'] and $_REQUEST['MAIN_ACTION'] are there to help.
    

    
