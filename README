//--------------------------------------------------
//			WELCOME TO PLOOF
//--------------------------------------------------

1). Make a copy of config/config.default.php -> config/config.php
2). Point your webserver to the public folder.
3). Add your models, controllers, and views in the directories named for them. 
4). Profit!

Oh yeah, you'll need something like this in your httpd.conf:

RewriteEngine On                                                                                                                
RewriteRule   ^/internal/crm/?(.*)$ http://dev.airadvice.net/internal/crm/$1 [R,NC,L]                                           
RewriteRule   ^/([\_A-Za-z0-9-]+)/([\_A-Za-z0-9-]+)/?$ /index.php?controller=$1&action=$2 [L,QSA]                          
RewriteRule   ^/([\_A-Za-z0-9-]+)/?$ /index.php?controller=$1 [L,QSA]                                                      

(At least until I get an htaccess conf in the root...)

//--------------------------------------------------
//			BASICS
//--------------------------------------------------

==== MODELS ====
Load this into your ploof database:

create table Comment(id int auto_increment, user_id int, value text);
create table User(id int auto_increment, name varchar(255), email varchar(255));
Then cd to your web root and run:

./ploof generate_models

This will generate two classes in model. You can now traverse and add comments from user and access user from comments. Example:

<?
        $u= new User();
        $u->name= "Andrew";
        $u->store();

        // now let's add comments. add_array takes an array of the form $field=>$value
        $u->comment->add_array(array("value"=>"I'm the first comment"));

        // or we can add as an object. the link back to this customer is automatic, you don't have to include it:
        $com= new Comment();
        $com->value= "I'm the second comment";
        $u->comment->add_object($com);

        // let's find a comment; find methods always return arrays.
        $return_array= $u->comment->find(array("value"=>"second"));

        // let's find the other comment; find_object always returns a single object:
        $return_obj= $u->comment->find_object(array("id"=>2));

        // let's get everything back:
        $return_array= $u->comment->find();

        // ok, let's go the other way.
        // for belongs_to, you can just use get to access the relationship:
        // because it's lazy, we need to refresh:
        $com->refresh('user');
        print_r($com->user->get()->name);
        
        // now let's populate another customer from an array:
        $arr= array("name"=>"Brian");
        
        $u2= new User();
        $u2->populate_from($arr);
        $u2->store();
        
?>
Note that this is lazy and caching, so if you change the associated set you need to refresh the values.