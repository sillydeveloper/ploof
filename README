PHP LIGHTWEIGHT OBJECT ORIENTED FRAMEWORK README
    Ploof Development Team: Andrew Ettinger, Nick Sinopoli, Steven Carnegie
    
    Copyright (c) 2010, ploof development team
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without modification, are permitted provided 
    that the following conditions are met:
    
    Redistributions of source code must retain the above copyright notice, this list of conditions and the 
    following disclaimer. 
    Redistributions in binary form must reproduce the above copyright notice, this list of 
    conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    The names of its contributors may not be used to endorse or promote products derived from this software without 
    specific prior written permission.
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
    GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    
=== GETTING STARTED ===

We don't have a release yet, so cloning our repository is the only wat to get the code:

    git clone git://github.com/sillydeveloper/ploof.git


=== THE PLOOF COMMAND ===

The ./ploof utility is the swiss army knife of the framework. Not sure what to run with it? Just run ./ploof without any options to get a list of currently supported commands.


    
=== MODEL FEATURES ===
    
    AUTO HANDLING
        Basically, if a table has [tablename]_id in it, ploof knows it's a relationship 
        and you can access it like:
            class foo()
            {
                protected $has_many= array('bar');
            }
        
            $f= new foo();
            foreach($f->bar->find() as $a_bar) { print($a_bar->id."\n"); }
    
    OVERRIDING
        You can override the auto loader by having a function named get_[foo]()
        Example:
        
            class foo()
            {
                protected $has_many= array('bar');
                function get_bar()
                {
                    return bar::find('start_date < now()');
                }
            }
    
        Whatever is returned is used by the caching / lazy loader mechanism.


=== CONTROLLER FEATURES ===
    
    REDIR
        Pass in a GET or POST variable called 'redir' with a url to have the controller auto-route 
        you once the render is complete
    
    ROUTE
        Routable actions were intended to be used by things like add / delete / save
    
    ASSIGN
        Assigns are made available to your view via $controller->assign("varname", $varvalue);
        
    MAIN_CONTROLLER AND MAIN_ACTION
        If you need to know who the *topmost* call is coming from when the page loads,
        $_REQUEST['main_controller'] and $_REQUEST['MAIN_ACTION'] are there to help.
    

    
